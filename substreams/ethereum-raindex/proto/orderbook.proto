syntax = "proto3";

package raindex.orderbook;

// Describes a vault owned by an individual user holding specific ERC20 tokens.
// Vaults fund orders and this Protobuf representation is needed to associate
// liquidity with orders.
message Vault {
    // The owner of the vault.
    bytes owner = 1;
    // The token held in the vault.
    bytes token = 2;
    // The vault ID of the vault.
    bytes vault_id = 3;
    // The vault balance.
    bytes balance = 4;
}

// Defines a fully deployed order ready to evaluate by Orderbook. Identical to
// `Order` except for the newer `EvaluableV2`.
message OrderV3 {
    // The owner of the order is the `msg.sender` that added the order.
    bytes owner = 1;

    // Standard `EvaluableV2` with entrypoints for both "calculate order" and
    // "handle IO". The latter MAY be empty bytes, in which case it will be 
    // skipped at runtime to save gas.
    EvaluableV3 evaluable = 2;

    // A list of input tokens that are economically equivalent for the purpose
    // of processing this order. Inputs are relative to the order so these
    // tokens will be sent to the owners vault.
    repeated IO valid_inputs = 3;

    // A list of output tokens that are economically equivalent for the purpose
    // of processing this order. Outputs are relative to the order so these
    // tokens will be sent from the owners vault.
    repeated IO valid_outputs = 4;

    // // A unique value for the order that the owner can use to prevent the order
    // // hash being predictable or collide with existing orders. This MAY be
    // // useful to prevent `addOrder` noops for orders with identical logic,
    // // or to hide information on confidential chains.
    // bytes nonce = 5;
}

// Struct over the return of `IParserV2.parse2` which MAY be more convenient to
// work with than raw addresses.
message EvaluableV3 {
    // Address of the interpreter that will evaluate the expression.
    bytes interpreter = 1;

    // Address of the store that will store state changes due to evaluation of the expression.
    bytes store = 2;

    // // Bytecode of the expression to be evaluated.
    // bytes bytecode = 3;
}

// Configuration for a single input or output on an `Order`.
message IO {
    // The token to either send from the owner as an output or receive from the
    // counterparty to the owner as an input. The tokens are not moved during an
    // order, only internal vault balances are updated, until a separate withdraw
    // step.
    bytes token = 1;

    // // The decimals to use for internal scaling calculations for `token`. This is
    // // provided directly in IO to save gas on external lookups and to respect the
    // // ERC20 spec that mandates NOT assuming or using the `decimals` method for
    // // onchain calculations. Ostensibly the decimals exists so that all
    // // calculate order entrypoints can treat amounts and ratios as 18 decimal
    // // fixed point values. Order max amounts MUST be rounded down and IO ratios
    // // rounded up to compensate for any loss of precision during decimal
    // // rescaling.
    // uint32 decimals = 2;

    // The vault ID that tokens will move into if this is an input or move out
    // from if this is an output.
    // NOTE: Make it a big endian encoded int to be consistent with Tycho.
    bytes vault_id = 3;
}



message Events {
    repeated OrderbookEvent orderbook_events = 1;

    message OrderbookEvent {
        oneof event {
            Deposit deposit = 1;
            Withdraw withdraw = 2;
            AddOrderV2 add_order = 3;
            // RemoveOrderV2
            // TakeOrderV2
            // OrderNotFound
            // OrderZeroAmount
            // OrderExceedsMaxRatio
            // ClearV2
            // AfterClear
        }

        uint64 log_ordinal = 100;

        // Some tokens have been deposited to a vault.
        message Deposit {
            // `msg.sender` depositing tokens. Delegated deposits are NOT supported.
            bytes sender = 1;
            // The token being deposited.
            bytes token = 2;
            // The vault ID the tokens are being deposited under.
            // NOTE: Make it a big endian encoded int to be consistent with Tycho.
            bytes vault_id = 3;
            // The amount of tokens deposited.
            // NOTE: Make it a big endian encoded int to be consistent with Tycho.
            bytes amount = 4;
        }

        // Some tokens have been withdrawn from a vault.
        message Withdraw {
            // `msg.sender` withdrawing tokens. Delegated withdrawals are NOT supported.
            bytes sender = 1;

            // The token being withdrawn.
            bytes token = 2;

            // The vault ID the tokens are being withdrawn from.
            bytes vault_id = 3;

            // // The amount of tokens requested to withdraw.
            // bytes target_amount = 4;

            // The amount of tokens withdrawn, can be less than the
            // target amount if the vault does not have the funds available to cover
            // the target amount. For example an active order might move tokens before
            // the withdraw completes.
            bytes amount = 5;
        }

        // An order has been added to the orderbook. The order is permanently and
        // always active according to its expression until/unless it is removed.
        message AddOrderV2 {
            // `msg.sender` adding the order and is owner of the order.
            bytes sender = 1;
            // The hash of the order as it is recorded onchain. Only
            // the hash is stored in Orderbook storage to avoid paying gas to store the
            // entire order.
            bytes order_hash = 2;
            // The newly added order. MUST be handed back as-is when
            // clearing orders and contains derived information in addition to the order
            // config that was provided by the order owner.
            OrderV3 order = 3;
        }
    }
}